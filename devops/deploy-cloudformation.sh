#!/bin/bash

# =============================================================================
# –ö–ê–ù–§–Ü–ì–£–†–ê–¶–´–Ø –†–ê–ó–ì–û–†–¢–ö–Ü
# =============================================================================

# –ê–¥–∫–ª—é—á–∞–µ–º pager –¥–ª—è AWS CLI
export AWS_PAGER=""

# –ü–∞—Ä–∞–º–µ—Ç—Ä –∞—Å—è—Ä–æ–¥–¥–∑—è (dev –∞–±–æ prod)
ENVIRONMENT=${1:-dev}

# –ü—Ä–∞–≤—è—Ä–∞–µ–º –¥–∞–ø—É—à—á–∞–ª—å–Ω—ã—è –∑–Ω–∞—á—ç–Ω–Ω—ñ
if [[ "$ENVIRONMENT" != "dev" && "$ENVIRONMENT" != "prod" ]]; then
    echo "‚ùå –ü–∞–º—ã–ª–∫–∞: ENVIRONMENT –ø–∞–≤—ñ–Ω–µ–Ω –±—ã—Ü—å 'dev' –∞–±–æ 'prod'"
    echo "–í—ã–∫–∞—Ä—ã—Å—Ç–∞–Ω–Ω–µ: $0 [dev|prod]"
    echo "–ü–∞ –∑–º–∞—û—á–∞–Ω–Ω—ñ: dev"
    exit 1
fi

# –ù–∞–∑–≤–∞ —Å—Ç—ç–∫–∞ –∑ —Å—É—Ñ—ñ–∫—Å–∞–º –∞—Å—è—Ä–æ–¥–¥–∑—è
STACK_NAME="verti-converter-${ENVIRONMENT}"
REGION="eu-central-1"
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

# ECR —Ä—ç–ø–∞–∑—ñ—Ç–æ—Ä—ã–π –∑ —Å—É—Ñ—ñ–∫—Å–∞–º –∞—Å—è—Ä–æ–¥–¥–∑—è
ECR_REPOSITORY_NAME="ibm-verti-converter-${ENVIRONMENT}"
ECR_URI="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"

# S3 –±–∞–∫–µ—Ç—ã —û –∑–∞–ª–µ–∂–Ω–∞—Å—Ü—ñ –∞–¥ –∞—Å—è—Ä–æ–¥–¥–∑—è
if [[ "$ENVIRONMENT" == "dev" ]]; then
    INPUT_BUCKET="ibm-editor-dev"
    OUTPUT_BUCKET="ibm-vert-dev"
else
    INPUT_BUCKET="ibm-editor"
    OUTPUT_BUCKET="ibm-vert"
fi

# –ù–∞–ª–∞–¥—ã –ª–æ–≥–∞–≤–∞–Ω–Ω—è
LOG_LEVEL="INFO"

# =============================================================================
# –°–ö–†–´–ü–¢ –†–ê–ó–ì–û–†–¢–ö–Ü
# =============================================================================

echo "üöÄ –ü–∞—á—ã–Ω–∞–µ–º —Ä–∞–∑–≥–æ—Ä—Ç–∫—É –¥–ª—è –∞—Å—è—Ä–æ–¥–¥–∑—è: ${ENVIRONMENT}"
echo "üì¶ –°—Ç—ç–∫: ${STACK_NAME}"
echo "üìÅ ECR Repository: ${ECR_REPOSITORY_NAME}"
echo "üì• Input Bucket: ${INPUT_BUCKET}"
echo "üì§ Output Bucket: ${OUTPUT_BUCKET}"
echo ""

# –ü—Ä–∞–≤—è—Ä–∞–µ–º —Ü—ñ —ñ—Å–Ω—É–µ —Å—Ç—ç–∫
if aws cloudformation describe-stacks --stack-name ${STACK_NAME} --region ${REGION} >/dev/null 2>&1; then
    echo "–°—Ç—ç–∫ ${STACK_NAME} —É–∂–æ —ñ—Å–Ω—É–µ. –ê–±–Ω–∞—û–ª—è–µ–º..."
    OPERATION="update-stack"
else
    echo "–°—Ç–≤–∞—Ä–∞–µ–º –Ω–æ–≤—ã —Å—Ç—ç–∫ ${STACK_NAME}..."
    OPERATION="create-stack"
fi

# –ë—É–¥—É–µ–º Docker image
echo "–ë—É–¥—É–µ–º Docker image..."
if ! docker build --platform linux/amd64 --provenance=false -t ${STACK_NAME} -f devops/Dockerfile .; then
    echo "‚ùå –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∑–±–æ—Ä—Ü—ã Docker image. –°–ø—ã–Ω—è–µ–º –≤—ã–∫–∞–Ω–∞–Ω–Ω–µ."
    exit 1
fi
echo "‚úÖ Docker image –ø–∞—Å–ø—è—Ö–æ–≤–∞ –ø–∞–±—É–¥–∞–≤–∞–Ω—ã –¥–ª—è linux/amd64"

# –°—Ç–≤–∞—Ä–∞–µ–º ECR —Ä—ç–ø–∞–∑—ñ—Ç–æ—Ä—ã–π (–∫–∞–ª—ñ –Ω–µ —ñ—Å–Ω—É–µ)
echo "–ü—Ä–∞–≤—è—Ä–∞–µ–º ECR repository..."
if ! aws ecr describe-repositories --repository-names ${ECR_REPOSITORY_NAME} --region ${REGION} >/dev/null 2>&1; then
    echo "–°—Ç–≤–∞—Ä–∞–µ–º ECR repository..."
    aws ecr create-repository --repository-name ${ECR_REPOSITORY_NAME} --region ${REGION}
    
    # –ù–∞–ª–∞–¥–∂–≤–∞–µ–º lifecycle policy
    echo "–ù–∞–ª–∞–¥–∂–≤–∞–µ–º lifecycle policy..."
    aws ecr put-lifecycle-policy \
        --repository-name ${ECR_REPOSITORY_NAME} \
        --lifecycle-policy-text '{
            "rules": [
                {
                    "rulePriority": 1,
                    "description": "Keep last 3 images",
                    "selection": {
                        "tagStatus": "any",
                        "countType": "imageCountMoreThan",
                        "countNumber": 3
                    },
                    "action": {
                        "type": "expire"
                    }
                }
            ]
        }' \
        --region ${REGION}
    
    echo "‚úÖ ECR repository —Å—Ç–≤–æ—Ä–∞–Ω—ã –∑ lifecycle policy"
else
    echo "‚ÑπÔ∏è ECR repository —É–∂–æ —ñ—Å–Ω—É–µ"
fi

# –ê—û—Ç–∞—Ä—ã–∑—É–µ–º—Å—è —û ECR
echo "–ê—û—Ç–∞—Ä—ã–∑—É–µ–º—Å—è —û ECR..."
if ! aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_URI}; then
    echo "‚ùå –ü–∞–º—ã–ª–∫–∞ –∞—û—Ç–∞—Ä—ã–∑–∞—Ü—ã—ñ —û ECR. –°–ø—ã–Ω—è–µ–º –≤—ã–∫–∞–Ω–∞–Ω–Ω–µ."
    exit 1
fi

# –¢—ç–≥–∞–≤–∞–µ–º —ñ –ø—É—à–∞–µ–º image
echo "–ü—É—à–∞–µ–º Docker image —û ECR..."
docker tag ${STACK_NAME}:latest ${ECR_URI}:latest
if ! docker push ${ECR_URI}:latest; then
    echo "‚ùå –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã –ø—É—à–∞–≤–∞–Ω–Ω—ñ Docker image. –°–ø—ã–Ω—è–µ–º –≤—ã–∫–∞–Ω–∞–Ω–Ω–µ."
    exit 1
fi
echo "‚úÖ Docker image –ø–∞—Å–ø—è—Ö–æ–≤–∞ –∑–∞–ø—É—à–∞–Ω —É ECR"

# –†–∞–∑–≥–æ—Ä—Ç–≤–∞–µ–º CloudFormation —Å—Ç—ç–∫
echo "–†–∞–∑–≥–æ—Ä—Ç–≤–∞–µ–º CloudFormation —Å—Ç—ç–∫..."
if ! aws cloudformation ${OPERATION} \
    --stack-name ${STACK_NAME} \
    --template-body file://devops/template.yaml \
    --parameters \
        ParameterKey=InputBucket,ParameterValue=${INPUT_BUCKET} \
        ParameterKey=OutputBucket,ParameterValue=${OUTPUT_BUCKET} \
        ParameterKey=LogLevel,ParameterValue=${LOG_LEVEL} \
        ParameterKey=ECRRepositoryName,ParameterValue=${ECR_REPOSITORY_NAME} \
    --capabilities CAPABILITY_NAMED_IAM \
    --region ${REGION}; then
    echo "‚ùå –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã —Ä–∞–∑–≥–æ—Ä—Ç—Ü—ã CloudFormation —Å—Ç—ç–∫–∞. –°–ø—ã–Ω—è–µ–º –≤—ã–∫–∞–Ω–∞–Ω–Ω–µ."
    exit 1
fi

# –ß–∞–∫–∞–µ–º –∑–∞–≤–µ—Ä—à—ç–Ω–Ω—è —Ä–∞–∑–≥–æ—Ä—Ç–∫—ñ
echo "–ß–∞–∫–∞–µ–º –∑–∞–≤–µ—Ä—à—ç–Ω–Ω—è —Ä–∞–∑–≥–æ—Ä—Ç–∫—ñ..."
if [ "$OPERATION" = "create-stack" ]; then
    aws cloudformation wait stack-create-complete \
        --stack-name ${STACK_NAME} \
        --region ${REGION}
else
    aws cloudformation wait stack-update-complete \
        --stack-name ${STACK_NAME} \
        --region ${REGION}
fi

if [ $? -eq 0 ]; then
    echo "‚úÖ –†–∞–∑–≥–æ—Ä—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∞–Ω–∞ –ø–∞—Å–ø—è—Ö–æ–≤–∞!"
    
    # –ù–∞–ª–∞–¥–∂–≤–∞–µ–º ReservedConcurrencyLimit –ø–∞—Å–ª—è —Å—Ç–≤–∞—Ä—ç–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ã—ñ
    echo "–ù–∞–ª–∞–¥–∂–≤–∞–µ–º ReservedConcurrencyLimit..."
    aws lambda put-function-concurrency \
        --function-name ${STACK_NAME}-function \
        --reserved-concurrent-executions 1 \
        --region ${REGION} 2>/dev/null || echo "‚ÑπÔ∏è ReservedConcurrencyLimit —É–∂–æ –Ω–∞–ª–∞–¥–∂–∞–Ω—ã –∞–±–æ –Ω–µ –ø–∞—Ç—Ä—ç–±–Ω—ã"
    
    # –í—ã–≤–æ–¥–∑—ñ–º –≤—ã–Ω—ñ–∫—ñ
    echo "=== –í–´–ù–Ü–ö–Ü –†–ê–ó–ì–û–†–¢–ö–Ü ==="
    aws cloudformation describe-stacks \
        --stack-name ${STACK_NAME} \
        --region ${REGION} \
        --query 'Stacks[0].Outputs' \
        --output table
else
    echo "‚ùå –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã —Ä–∞–∑–≥–æ—Ä—Ç—Ü—ã"
    echo "–ü—Ä–∞–≤–µ—Ä—Ü–µ –ª–æ–≥—ñ:"
    aws cloudformation describe-stack-events \
        --stack-name ${STACK_NAME} \
        --region ${REGION} \
        --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatusReason]' \
        --output table
fi 