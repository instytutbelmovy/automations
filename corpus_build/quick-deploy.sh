#!/bin/bash

# =============================================================================
# –•–£–¢–ö–Ü –î–≠–ü–õ–û–ô–ú–≠–ù–¢ –ö–û–î–£
# =============================================================================

# –ê–¥–∫–ª—é—á–∞–µ–º pager –¥–ª—è AWS CLI
export AWS_PAGER=""

# –ü–∞—Ä–∞–º–µ—Ç—Ä –∞—Å—è—Ä–æ–¥–¥–∑—è (dev –∞–±–æ prod)
ENVIRONMENT=${1:-dev}

# –ü—Ä–∞–≤—è—Ä–∞–µ–º –¥–∞–ø—É—à—á–∞–ª—å–Ω—ã—è –∑–Ω–∞—á—ç–Ω–Ω—ñ
if [[ "$ENVIRONMENT" != "dev" && "$ENVIRONMENT" != "prod" ]]; then
    echo "‚ùå –ü–∞–º—ã–ª–∫–∞: ENVIRONMENT –ø–∞–≤—ñ–Ω–µ–Ω –±—ã—Ü—å 'dev' –∞–±–æ 'prod'"
    echo "–í—ã–∫–∞—Ä—ã—Å—Ç–∞–Ω–Ω–µ: $0 [dev|prod]"
    echo "–ü–∞ –∑–º–∞—û—á–∞–Ω–Ω—ñ: dev"
    exit 1
fi

# –ù–∞–∑–≤–∞ —Å—Ç—ç–∫–∞ –∑ —Å—É—Ñ—ñ–∫—Å–∞–º –∞—Å—è—Ä–æ–¥–¥–∑—è
STACK_NAME="corpus-build-${ENVIRONMENT}"
REGION="eu-central-1"
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
ECR_REPOSITORY_NAME="instytutbelmovy-corpus-build-${ENVIRONMENT}"
ECR_URI="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"
FUNCTION_NAME="${STACK_NAME}-function"

echo "‚ö° –•—É—Ç–∫—ñ –¥—ç–ø–ª–æ–π–º—ç–Ω—Ç –∫–æ–¥—É –¥–ª—è –∞—Å—è—Ä–æ–¥–¥–∑—è: ${ENVIRONMENT}"
echo "üì¶ –°—Ç—ç–∫: ${STACK_NAME}"
echo "üèóÔ∏è ECR Repository: ${ECR_REPOSITORY_NAME}"
echo ""

# –ü—Ä–∞–≤—è—Ä–∞–µ–º —Ü—ñ —ñ—Å–Ω—É–µ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ã—è
echo "–ü—Ä–∞–≤—è—Ä–∞–µ–º —ñ—Å–Ω–∞–≤–∞–Ω—å–Ω–µ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ã—ñ..."
if ! aws lambda get-function --function-name ${FUNCTION_NAME} --region ${REGION} >/dev/null 2>&1; then
    echo "‚ùå –õ—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ã—è –Ω–µ —ñ—Å–Ω—É–µ. –í—ã–∫–∞—Ä—ã—Å—Ç–æ—û–≤–∞–π—Ü–µ –ø–æ—û–Ω—ã –¥—ç–ø–ª–æ–π–º—ç–Ω—Ç: ./corpus_build/deploy-cloudformation.sh ${ENVIRONMENT}"
    exit 1
fi

# –°–∞–±—Ä–∞—Ü—å Docker image
echo "üèóÔ∏è –ó–±–æ—Ä–∫–∞ Docker image..."
if ! docker build \
    --platform linux/amd64 \
    --provenance=false \
    -t ${STACK_NAME} \
    -f corpus_build/Dockerfile .; then
    echo "‚ùå –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∑–±–æ—Ä—Ü—ã Docker image. –°–ø—ã–Ω—è–µ–º –≤—ã–∫–∞–Ω–∞–Ω—å–Ω–µ."
    exit 1
fi

# –ê—û—Ç–∞—Ä—ã–∑–∞–≤–∞—Ü—Ü–∞ —û ECR
echo "üîê –ê—û—Ç–∞—Ä—ã–∑–∞—Ü—ã—è —û ECR..."
aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com

# –¢—ç–≥–Ω—É—Ü—å —ñ –≤—ã–ø—Ö–Ω—É—Ü—å image
echo "üì§ –í—ã–ø—Ö–∞–Ω—å–Ω–µ Docker image..."
docker tag ${STACK_NAME}:latest ${ECR_URI}:latest
docker push ${ECR_URI}:latest

# –ê–±–Ω–∞–≤—ñ—Ü—å –∫–æ–¥ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ã—ñ
echo "üîÑ –ê–±–Ω–∞—û–ª–µ–Ω—å–Ω–µ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ã—ñ..."
if ! aws lambda update-function-code \
    --function-name ${FUNCTION_NAME} \
    --image-uri ${ECR_URI}:latest \
    --region ${REGION}; then
    echo "‚ùå –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∞–±–Ω–∞—û–ª–µ–Ω—å–Ω—ñ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ã—ñ. –°–ø—ã–Ω—è–µ–º –≤—ã–∫–∞–Ω–∞–Ω—å–Ω–µ."
    exit 1
fi

# –ß–∞–∫–∞–µ–º —Å–∫–∞–Ω—á—ç–Ω—å–Ω—è –∞–±–Ω–∞—û–ª–µ–Ω—å–Ω—è
echo "–ß–∞–∫–∞–µ–º —Å–∫–∞–Ω—á—ç–Ω—å–Ω—è –∞–±–Ω–∞—û–ª–µ–Ω—å–Ω—è –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ã—ñ..."
aws lambda wait function-updated --function-name ${FUNCTION_NAME} --region ${REGION}

if [ $? -eq 0 ]; then
    echo "‚úÖ –•—É—Ç–∫—ñ –¥—ç–ø–ª–æ–π–º—ç–Ω—Ç –≤—ã–∫–∞–Ω–∞–Ω—ã –ø–∞—Å—å–ø—è—Ö–æ–≤–∞!"
    
    # –í—ã–≤–æ–¥–∑—ñ–º —ñ–Ω—Ñ–∞—Ä–º–∞—Ü—ã—é –ø—Ä–∞ —Ñ—É–Ω–∫—Ü—ã—é
    echo "=== –Ü–ù–§–ê–†–ú–ê–¶–´–Ø –ü–†–ê –õ–Ø–ú–ë–î–ê –§–£–ù–ö–¶–´–Æ ==="
    aws lambda get-function \
        --function-name ${FUNCTION_NAME} \
        --region ${REGION} \
        --query 'Configuration.[FunctionName,Runtime,Timeout,MemorySize,LastModified]' \
        --output table
    
    echo ""
    echo "üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ã—ñ:"
    echo "1. –õ—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ã—è: ${FUNCTION_NAME}"
    echo "2. CloudWatch Logs: /aws/lambda/${FUNCTION_NAME}"
    echo "3. ECR Repository: ${ECR_REPOSITORY_NAME}"
    echo "4. –î–ª—è –ø–æ—û–Ω–∞–≥–∞ –¥—ç–ø–ª–æ–π–º—ç–Ω—Ç—É: ./corpus_build/deploy-cloudformation.sh ${ENVIRONMENT}"
    
else
    echo "‚ùå –ü–∞–º—ã–ª–∫–∞ –ø—Ä—ã –∞–±–Ω–∞—û–ª–µ–Ω—å–Ω—ñ –ª—è–º–±–¥–∞ —Ñ—É–Ω–∫—Ü—ã—ñ"
    echo "–ü—Ä–∞–≤–µ—Ä—Ü–µ CloudWatch Logs –¥–ª—è –¥—ç—Ç–∞–ª—è—û"
fi 